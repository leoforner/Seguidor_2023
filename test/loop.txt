// distancia entre o sensor e a linha em cm
    double distanciaLinha = (forwardSensor.searchLine(&state)/100.0) - 5.70/2.0;

    // calcula o setPoint de cada roda em cm/s
    carModel.calculateSetPoints(distanciaLinha);

    // velocidade dos motores
    double velRight = encoderRight.getRPS();
    double velLeft = encoderLeft.getRPS();

    float erro1 = wheelsSetPoint[0] - velRight;
    float erro2 = wheelsSetPoint[1] - velLeft;

    // pid para a roda
    int32_t pwmSaida1 = control.rightPI(50, 1, erro1, 4095);
    int32_t pwmSaida2 = control.leftPI(50, 1, erro2, 4095);

    // calcula pwm max (correspondente a 6v)
    float tensaoBateria = (analogicoParaTensao(analogRead(divTensao)))*7.6/1.92; //7.6v viram 1.92v (divisor de tensÃ£o)
    int pwm_6volts = (6.0*4095)/tensaoBateria;
    if(pwm_6volts > 4095) pwm_6volts = 4095;

    // monitor serial
    Serial.printf("Left: %.4f\tRight: %.4f\tsetpoints: %.4f - %.4f\terros: %.4f - %.4f\tpwms: %d - %d\n", 
                    velLeft, velRight, wheelsSetPoint[0], wheelsSetPoint[1], erro2, erro1, pwmSaida2, pwmSaida1);
    // plotagem
    //Serial.printf("%.2f, %.2f, %.2f, %.2f\n", wheelsSetPoint[0], wheelsSetPoint[1], velLeft, velRight);

    ledcWrite(0, pwmSaida2);
    ledcWrite(1, pwmSaida1);
